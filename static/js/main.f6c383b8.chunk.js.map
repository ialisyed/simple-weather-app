{"version":3,"sources":["store/actions/index.js","constants/actions/index.js","constants/General/index.js","constants/API/index.js","service/Weather.js","manager/Weather.js","store/actions/Weather.js","locale/en.js","components/weather-card/index.js","components/weather-units-control/index.js","components/bar-chart/index.js","components/slicker-arrow/index.js","helper/UI/index.js","screens/weather/index.js","screens/loading/index.js","App.js","serviceWorker.js","store/reducers/Weather.js","store/reducers/index.js","store/index.js","components/error-boundary/index.js","index.js"],"names":["success","type","payload","failure","GENERAL","APP_ID","CITY_AND_STATE","ICON_URL","UNITS","CELSIUS","FAHRENHEIT","DATA_KEYS_MAP","DATE_FORMATS","hh_mm_ss_a","LL","BASE_URL","CONST_PARAMS","q","APPID","a","units","params","cnt","axios","get","then","res","data","Promise","all","manageWeatherApiCall","celsiusData","fahrenheitData","fetchThreeHrWeather","dataMap","list","forEach","val","date","dt_txt","split","values","push","Object","keys","key","tempAvg","reduce","prev","current","main","temp","length","parseWeatherData","getWeatherData","getWeather","dispatch","WEATHER_ACTIONS","request","WeatherManager","LOCALIZATION","TEMPERATURE_UNIT","CELCIUS","DEGREE_CELCIUS","DEGREE_FAHRENHEIT","TEMPERATURE","TIME","TEMP_LABEL","DATE_LABEL","Celcius","Fahrenheit","WeatherCard","props","isSelected","onClick","icon","temprature","unit","Card","className","style","backgroundColor","CardActionArea","CardMedia","image","replace","CardContent","Typography","gutterBottom","variant","component","color","toFixed","WeatherUnitControl","value","defaultValue","onChange","FormControl","FormLabel","RadioGroup","row","aria-label","name","FormControlLabel","control","Radio","label","labelPlacement","BarChart","xAxisLabel","yAxisLabel","yAxisTicksCallBack","height","options","maintainAspectRatio","scales","yAxes","ticks","callback","scaleLabel","display","labelString","xAxes","defaultProps","index","Arrow","SLIDER_SETTINGS","dots","infinite","speed","slidesToScroll","slidesToShow","nextArrow","prevArrow","responsive","breakpoint","settings","initialSlide","makeBarChartData","labels","datasets","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","moment","format","connect","state","weather","useState","currentUnit","setCurrentUnit","currentData","selectedCardKey","setSelectedCardKey","Container","maxWidth","event","target","map","dt","Loading","CircularProgress","loading","bindActionCreators","withRouter","useEffect","routes","exact","path","Weather","Boolean","window","location","hostname","match","initialState","weatherReducer","action","reducers","combineReducers","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ErrorBoundary","hasError","this","children","error","React","Component","app","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.f6c383b8.chunk.js","sourcesContent":["export function request(type, payload) { return { type, payload } }\r\nexport function success(type, payload) { return { type, payload } }\r\nexport function failure(type, payload) { return { type, payload } }","export default {\r\n    FETCH_WEATHER_REQUEST: 'FETCH_WEATHER_REQUEST',\r\n    FETCH_WEATHER_SUCCESS: 'FETCH_WEATHER_SUCCESS',\r\n    FETCH_WEATHER_FAILURE: 'FETCH_WEATHER_FAILURE'\r\n}","export const ICON_REPLACER = '{{icon}}}';\r\n\r\nconst GENERAL = {\r\n    APP_ID: '75f972b80e26f14fe6c920aa6a85ad57',\r\n    CITY_AND_STATE: 'Munich,de',\r\n    /**\r\n     * Image url to get weather icon\r\n     */\r\n    ICON_URL: `http://openweathermap.org/img/wn/${ICON_REPLACER}@2x.png`,\r\n    UNITS: {\r\n        CELSIUS: 'metric',\r\n        FAHRENHEIT: 'imperial',\r\n    },\r\n    DATA_KEYS_MAP: {\r\n        CELSIUS: 'celsiusData',\r\n        FAHRENHEIT: 'fahrenheitData',\r\n    },\r\n    DATE_FORMATS: {\r\n        hh_mm_ss_a: 'hh:mm:ss a',\r\n        LL: 'LL',\r\n    }\r\n}\r\n\r\n\r\nexport default GENERAL;","export const BASE_URL = 'https://api.openweathermap.org/data/2.5/forecast';","import axios from 'axios';\r\nimport { BASE_URL } from \"../constants/API\";\r\nimport GENERAL from '../constants/General';\r\n\r\n/**\r\n * Params that will be constant for every api call of weather api\r\n */\r\nconst CONST_PARAMS = { q: GENERAL.CITY_AND_STATE, APPID: GENERAL.APP_ID };\r\n\r\n/**\r\n * Make API call to fetch weather data\r\n * @param {String} units \r\n */\r\nasync function fetchThreeHrWeather(units = 'metric') {\r\n    const params = { ...CONST_PARAMS, cnt: 40, units };\r\n    try {\r\n        return axios.get(BASE_URL, { params }).then(res => res.data);\r\n    } catch (e) {\r\n        return [];\r\n    }\r\n}\r\n\r\nexport { fetchThreeHrWeather };","import GENERAL from \"../constants/General\";\r\nimport { fetchThreeHrWeather } from \"../service/Weather\";\r\n\r\n/**\r\n * returs parsed weather data\r\n */\r\nasync function getWeatherData() {\r\n    const [celsiusData, fahrenheitData] = await Promise.all([\r\n        manageWeatherApiCall(GENERAL.UNITS.CELSIUS),\r\n        manageWeatherApiCall(GENERAL.UNITS.FAHRENHEIT),\r\n    ]);\r\n    return { celsiusData, fahrenheitData };\r\n}\r\n/**\r\n * parse api response as soon as response arrives\r\n * @param {String} units \r\n */\r\nfunction manageWeatherApiCall(units) {\r\n    return fetchThreeHrWeather(units).then(data => parseWeatherData(data));\r\n}\r\n\r\n/**\r\n * Parse weather api response to simplify data handling in Screen\r\n * @param {Object} data - Api response\r\n */\r\nfunction parseWeatherData(data) {\r\n    const dataMap = {};\r\n    data.list.forEach(val => {\r\n        // create a map containing relevant values against each data\r\n        // by splitting dt_txt to get data string\r\n        const date = val.dt_txt.split(' ')[0];\r\n        if (!dataMap[date]) {\r\n            dataMap[date] = { values: [val] }\r\n        } else {\r\n            dataMap[date].values.push(val);\r\n        }\r\n    });\r\n\r\n    // add average temprature to dataMap against each date\r\n    Object.keys(dataMap).forEach(key => {\r\n        const tempSum = dataMap[key].values.reduce((prev, current) => ({ main: { temp: prev.main.temp + current.main.temp } }), { main: { temp: 0 } });\r\n        const tempAvg = tempSum.main.temp / dataMap[key].values.length;\r\n        dataMap[key] = { ...dataMap[key], tempAvg };\r\n    })\r\n    return dataMap;\r\n}\r\n\r\nexport default {\r\n    getWeatherData,\r\n}","import { request, success, failure } from './index';\r\nimport WEATHER_ACTIONS from '../../constants/actions';\r\nimport WeatherManager from '../../manager/Weather';\r\n\r\n/**\r\n * fetches and returns parse weather data to the store\r\n */\r\nfunction getWeather() {\r\n    return async dispatch => {\r\n        dispatch(request(WEATHER_ACTIONS.FETCH_WEATHER_REQUEST));\r\n        try {\r\n            let data = await WeatherManager.getWeatherData();\r\n            dispatch(success(WEATHER_ACTIONS.FETCH_WEATHER_SUCCESS, data));\r\n        } catch (e) {\r\n            dispatch(failure(WEATHER_ACTIONS.FETCH_WEATHER_FAILURE, e));\r\n        }\r\n    }\r\n}\r\n\r\nexport { getWeather };","const LOCALIZATION = {\r\n    TEMPERATURE_UNIT: 'Temperature Unit',\r\n    CELCIUS: 'Celcius',\r\n    FAHRENHEIT: 'Fahrenheit',\r\n    DEGREE_CELCIUS: '℃',\r\n    DEGREE_FAHRENHEIT: '℉',\r\n    TEMPERATURE: 'Temperature',\r\n    TIME: 'Time',\r\n    TEMP_LABEL: 'Temp:',\r\n    DATE_LABEL: 'Date:'\r\n}\r\n\r\nexport default LOCALIZATION;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Card, CardActionArea, CardMedia, CardContent, Typography } from '@material-ui/core';\r\n\r\nimport GENERAL from '../../constants/General';\r\nimport { ICON_REPLACER } from './../../constants/General/index';\r\nimport LOCALIZATION from './../../locale/en';\r\n\r\n/**\r\n * Renders Celcius symbol\r\n */\r\nfunction Celcius() {\r\n    return <>\r\n        &#8451;\r\n    </>\r\n}\r\n\r\n/**\r\n * Renders Fahrenheit symbol\r\n */\r\nfunction Fahrenheit() {\r\n    return <>\r\n        &#8457;\r\n    </>\r\n}\r\n\r\nconst SELECTED_CARD_COLOR = '#e8f4f8';\r\n\r\n/**\r\n * Temperature Card for each day\r\n * @param {any} props \r\n */\r\nfunction WeatherCard(props) {\r\n    const { isSelected, onClick, icon, temprature, unit, date } = props;\r\n    return (\r\n        <Card className=\"mt-30\" style={{ backgroundColor: isSelected ? SELECTED_CARD_COLOR : 'unset' }}>\r\n            <CardActionArea onClick={onClick}>\r\n                <CardMedia image={GENERAL.ICON_URL.replace(ICON_REPLACER, icon)} className='media' />\r\n                <CardContent>\r\n                    <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                        {LOCALIZATION.TEMP_LABEL}\r\n                    </Typography>\r\n                    <Typography variant=\"h3\" color=\"textSecondary\" component=\"p\">\r\n                        {temprature.toFixed(2)} {unit === GENERAL.DATA_KEYS_MAP.CELSIUS ? <Celcius /> : <Fahrenheit />}\r\n                    </Typography>\r\n                    <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                        {LOCALIZATION.DATE_LABEL}\r\n                    </Typography>\r\n                    <Typography variant=\"h5\" color=\"textSecondary\" component=\"p\">\r\n                        {date}\r\n                    </Typography>\r\n                </CardContent>\r\n            </CardActionArea >\r\n        </Card >\r\n    )\r\n};\r\n\r\nWeatherCard.propTypes = {\r\n    onClick: PropTypes.func,\r\n    icon: PropTypes.string,\r\n    temprature: PropTypes.number,\r\n    unit: PropTypes.string,\r\n    date: PropTypes.string,\r\n    isSelected: PropTypes.bool,\r\n}\r\n\r\nexport default WeatherCard;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { FormControl, FormLabel, RadioGroup, FormControlLabel, Radio } from '@material-ui/core';\r\n\r\nimport LOCALIZATION from './../../locale/en';\r\nimport GENERAL from '../../constants/General';\r\n\r\n/**\r\n * Celcius and Fahrenheit radio controls to control Temperature uni\r\n * @param {any} props \r\n */\r\nfunction WeatherUnitControl(props) {\r\n    const {value, defaultValue, onChange} = props\r\n    return (\r\n        <FormControl className=\"mt-3 mb-3\" component=\"fieldset\">\r\n            <FormLabel component=\"legend\">{LOCALIZATION.TEMPERATURE_UNIT}</FormLabel>\r\n            <RadioGroup\r\n                row\r\n                aria-label=\"temprature-unit\"\r\n                name=\"temprature-unit\"\r\n                defaultValue={defaultValue}\r\n                value={value}\r\n                onChange={onChange}\r\n            >\r\n                <FormControlLabel\r\n                    value={GENERAL.DATA_KEYS_MAP.CELSIUS}\r\n                    control={<Radio color=\"primary\" />}\r\n                    label={LOCALIZATION.CELCIUS}\r\n                    labelPlacement=\"end\"\r\n                />\r\n                <FormControlLabel\r\n                    value={GENERAL.DATA_KEYS_MAP.FAHRENHEIT}\r\n                    control={<Radio color=\"primary\" />}\r\n                    label={LOCALIZATION.FAHRENHEIT}\r\n                    labelPlacement=\"end\"\r\n                />\r\n            </RadioGroup>\r\n        </FormControl>\r\n    );\r\n}\r\n\r\nWeatherUnitControl.propTypes = {\r\n    value: PropTypes.string,\r\n    defaultValue: PropTypes.string,\r\n    onChange: PropTypes.func,\r\n}\r\n\r\nexport default WeatherUnitControl;\r\n\r\n","import React from 'react';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * Simple bar chart to display hourly weather data\r\n * @param {any} props \r\n */\r\nfunction BarChart(props) {\r\n    const { data, xAxisLabel, yAxisLabel, yAxisTicksCallBack } = props;\r\n    return (\r\n        <div className=\"mt-4\">\r\n            <Bar\r\n                data={data}\r\n                height={350}\r\n                options={{\r\n                    maintainAspectRatio: false,\r\n                    scales: {\r\n                        yAxes: [{\r\n                            ticks: {\r\n                                callback: yAxisTicksCallBack,\r\n                            },\r\n                            scaleLabel: {\r\n                                display: true,\r\n                                labelString: yAxisLabel\r\n                            }\r\n                        }],\r\n                        xAxes: [{\r\n                            scaleLabel: {\r\n                                display: true,\r\n                                labelString: xAxisLabel\r\n                            }\r\n                        }]\r\n                    }\r\n                }}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nBarChart.propTypes = {\r\n    data: PropTypes.any,\r\n    xAxisLabel: PropTypes.string,\r\n    yAxisLabel: PropTypes.string,\r\n    yAxisTicksCallBack: PropTypes.func,\r\n};\r\n\r\nBarChart.defaultProps = {\r\n    yAxisTicksCallBack: function (value, index, values) {\r\n        return value;\r\n    },\r\n};\r\n\r\nexport default BarChart;","import React from 'react';\r\n\r\n/**\r\n * Customizing slider's arrows\r\n * @param {any} props \r\n */\r\nfunction Arrow(props) {\r\n    const { className, style, onClick } = props;\r\n    return (\r\n        <div\r\n            className={`${className} customArrow`}\r\n            style={{ ...style, color: 'black' }}\r\n            onClick={onClick}\r\n        />\r\n    );\r\n}\r\n\r\nexport default Arrow;","import React from 'react';\r\nimport Arrow from './../../components/slicker-arrow/index';\r\nimport moment from 'moment';\r\nimport GENERAL from '../../constants/General';\r\n\r\n/**\r\n * Slider settings\r\n */\r\nexport const SLIDER_SETTINGS = {\r\n    dots: true,\r\n    infinite: false,\r\n    speed: 500,\r\n    slidesToScroll: 3,\r\n    slidesToShow: 3,\r\n    nextArrow: <Arrow />,\r\n    prevArrow: <Arrow />,\r\n    responsive: [\r\n        {\r\n            breakpoint: 1024,\r\n            settings: {\r\n                slidesToShow: 3,\r\n                slidesToScroll: 3,\r\n                infinite: false,\r\n                dots: true\r\n            }\r\n        },\r\n        {\r\n            breakpoint: 600,\r\n            settings: {\r\n                slidesToShow: 2,\r\n                slidesToScroll: 2,\r\n                initialSlide: 2\r\n            }\r\n        },\r\n        {\r\n            breakpoint: 480,\r\n            settings: {\r\n                slidesToShow: 1,\r\n                slidesToScroll: 1\r\n            }\r\n        }\r\n    ]\r\n};\r\n\r\n/**\r\n * Model chart data\r\n */\r\nconst getChartDataModel = () => ({\r\n    labels: [],\r\n    datasets: [{\r\n        label: '',\r\n        backgroundColor: 'rgba(255,99,132,0.2)',\r\n        borderColor: 'rgba(255,99,132,1)',\r\n        borderWidth: 1,\r\n        hoverBackgroundColor: 'rgba(255,99,132,0.4)',\r\n        hoverBorderColor: 'rgba(255,99,132,1)',\r\n        data: []\r\n    }]\r\n});\r\n\r\n/**\r\n * Parse weather data as per Bar Charts required data\r\n * @param {Array} values \r\n */\r\nexport function makeBarChartData(values = []) {\r\n    const data = getChartDataModel();\r\n    values.forEach(value => {\r\n        data.labels.push(moment(value.dt_txt).format(GENERAL.DATE_FORMATS.hh_mm_ss_a));\r\n        data.datasets[0].data.push(value.main.temp)\r\n    })\r\n    return data;\r\n}","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Slider from \"react-slick\";\r\nimport { Container } from '@material-ui/core';\r\nimport moment from 'moment';\r\n\r\nimport WeatherCard from '../../components/weather-card/index';\r\nimport WeatherUnitControl from '../../components/weather-units-control/index';\r\nimport BarChart from '../../components/bar-chart/index';\r\nimport { SLIDER_SETTINGS, makeBarChartData } from '../../helper/UI/index';\r\nimport GENERAL from '../../constants/General';\r\nimport LOCALIZATION from '../../locale/en';\r\n\r\nfunction Weather(props) {\r\n  const { data } = props;\r\n\r\n  // controlling current temperature unit. Celcius by default\r\n  const [currentUnit, setCurrentUnit] = useState(GENERAL.DATA_KEYS_MAP.CELSIUS);\r\n  \r\n  const currentData = data[currentUnit];\r\n\r\n  // controlling currently selected card. First card by default\r\n  const [selectedCardKey, setSelectedCardKey] = useState(Object.keys(currentData)[0]);\r\n\r\n  /**\r\n   * Handle temperature unit radio button change\r\n   * @param {HTMLRADIOEVENT} event \r\n   */\r\n  const handleRadioChange = (event) => setCurrentUnit(event.target.value)\r\n\r\n  /**\r\n   * Render daily weather cards\r\n   */\r\n  const renderCards = () => Object.keys(currentData).map((key, index) => (\r\n    <WeatherCard\r\n      key={currentData[key].values[0].dt}\r\n      isSelected={key === selectedCardKey}\r\n      onClick={() => setSelectedCardKey(key)}\r\n      icon={currentData[key].values[0].weather[0].icon}\r\n      temprature={currentData[key].tempAvg}\r\n      date={moment(key).format(GENERAL.DATE_FORMATS.LL)}\r\n      unit={currentUnit}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <Container maxWidth=\"md\">\r\n      <WeatherUnitControl\r\n        value={currentUnit}\r\n        defaultValue={currentUnit}\r\n        onChange={handleRadioChange}\r\n      />\r\n      <Slider {...SLIDER_SETTINGS}>\r\n        {renderCards()}\r\n      </Slider>\r\n      <BarChart\r\n        data={makeBarChartData(currentData[selectedCardKey].values)}\r\n        yAxisLabel={LOCALIZATION.TEMPERATURE}\r\n        xAxisLabel={LOCALIZATION.TIME}\r\n        yAxisTicksCallBack={function (value, index, values) {\r\n          // append current temperature unit to y-axis lable \r\n          const unit = currentUnit === GENERAL.DATA_KEYS_MAP.CELSIUS\r\n            ? LOCALIZATION.DEGREE_CELCIUS\r\n            : LOCALIZATION.DEGREE_FAHRENHEIT;\r\n          return value + unit;\r\n        }}\r\n      />\r\n    </Container>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  const { data } = state.weather;\r\n  return {\r\n    data,\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Weather);","import React from 'react';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nfunction Loading() {\r\n    return (\r\n        <div className='d-flex justify-content-center align-items-center flex-column mt-xl-5'>\r\n            <div>\r\n                <CircularProgress />\r\n            </div>\r\n            <div>\r\n                <h3 className=\"loader\">Loading...</h3>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Loading;","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { Route, withRouter } from 'react-router-dom';\n\nimport \"slick-carousel/slick/slick.css\";\nimport \"slick-carousel/slick/slick-theme.css\";\nimport \"./styles/customStyles.css\";\n\nimport { getWeather } from './store/actions/Weather';\n\nimport Weather from './screens/weather';\nimport Loading from './screens/loading';\n\nfunction App(props) {\n  const { getWeather } = props;\n\n  useEffect(() => {\n    getWeather();\n  }, [getWeather]);\n\n  let routes = (\n    <Route exact path='/' component={props.loading ? Loading : Weather} />\n  );\n\n  return (\n    <div className=\"App\" >\n      {routes}\n    </div>\n  );\n}\n\nconst mapDispatchToProps = dispatch => {\n  return bindActionCreators({\n    getWeather\n  }, dispatch)\n}\n\nconst mapStateToProps = state => {\n  const { loading } = state.weather\n  return {\n    loading\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(App));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import WEATHER_ACTIONS from '../../constants/actions';\r\n\r\nconst initialState = {\r\n    data: null,\r\n    loading: true\r\n}\r\n\r\nconst weatherReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case WEATHER_ACTIONS.FETCH_WEATHER_REQUEST:\r\n            return {\r\n                ...state,\r\n                loading: true\r\n            }\r\n        case WEATHER_ACTIONS.FETCH_WEATHER_SUCCESS:\r\n            return {\r\n                ...state,\r\n                data: action.payload,\r\n                loading: false\r\n            }\r\n        case WEATHER_ACTIONS.FETCH_WEATHER_FAILURE:\r\n\r\n            return {\r\n                ...state,\r\n                loading: true\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default weatherReducer;","import { combineReducers } from 'redux';\r\nimport weather from './Weather';\r\n\r\nconst reducers = combineReducers({\r\n    weather,\r\n});\r\n\r\nexport default reducers","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport reducers from './reducers';\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunk)));\r\nexport default store;","import React from 'react';\r\n\r\n/**\r\n * Simple Error boundary to catch error and to show a control screen \r\n */\r\nclass ErrorBoundary extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { hasError: false };\r\n    }\r\n\r\n    static getDerivedStateFromError(error) {\r\n        return { hasError: true };\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>Something went wrong.</h1>;\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n};\r\n\r\nexport default ErrorBoundary","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\n\nimport store from './store'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport ErrorBoundary from './components/error-boundary';\n\nconst app = (\n  <Provider store={store}>\n    <BrowserRouter>\n      <ErrorBoundary>\n        <App />\n      </ErrorBoundary>\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(\n  <React.StrictMode>\n    {app}\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}